?r.squaredGLMM
# read all data
source('../SCRIPTS/00a.readBiomass.R')
source('../SCRIPTS/00b.compileData.R')
source('../SCRIPTS/00c.readTree-v3.R')
source('../SCRIPTS/00d.problemSpp.2017.R')
source('../SCRIPTS/00e.readData.traits.R')
allRS <- read.csv("../DATA/allRS.csv")
# combine data and clean
source("../SCRIPTS/01.combine.data.R")
# NDVI, NDVI.CA, NDVI.CI, NDVI.ND, NDVI.ND.CA, NDVI.ND.CI
scaled <- as.data.frame(scale(prairie.bio[,81:123]))
scaled$Plot.category <- prairie.bio$Plot.category
scaled$TMT.use <- prairie.bio$TMT.use
scaled$biomass.all <- scale(prairie.bio$biomass.all)
scaled$coverTotal <- scale(prairie.bio$coverTotal)
scaled$dcover <- scale(prairie.bio$dcover)
scaled$AHOR_cm <- scale(prairie.bio$AHOR_cm)
scaled$VOL <- scale(prairie.bio$VOL)
scaled$DensVol <- scale(prairie.bio$NDVI * prairie.bio$VOL)
scaled$block <- prairie.bio$block
groups <- list(scaled,
scaled[which(scaled$Plot.category == "Monoculture"),],
scaled[which(scaled$Plot.category == "Treatment"),])
namesL <- c("all", "mono", "tmt")
i<-j<-1
lmer(use.prairie[[response]] ~ use.prairie[[pred1[i]]] + (1|use.prairie$ahor))
library(lme4)
lmer(use.prairie[[response]] ~ use.prairie[[pred1[i]]] + (1|use.prairie$ahor))
use.prairie <- groups[[j]]
response <- "biomass.all"
# 1 predictor, spectra ----
pred1 <- colnames(scaled)[c(1:7, 22:28)]
lmer(use.prairie[[response]] ~ use.prairie[[pred1[i]]] + (1|use.prairie$ahor))
lmer(use.prairie[[response]] ~ use.prairie[[pred1[i]]] + (1|use.prairie$block))
tmp <- lmer(use.prairie[[response]] ~ use.prairie[[pred1[i]]] + (1|use.prairie$block))
summary(tmp)
View(tmp)
scaled$block <- as.factor(scaled$block)
scaled$block <- as.factor(scaled$block)
tmp <- lmer(use.prairie[[response]] ~ use.prairie[[pred1[i]]] + (1|use.prairie$block))
tmp
summary(tmp)
View(tmp)
install.packages("nlme")
install.packages("nlme")
install.packages("nlme")
install.packages("nlme")
install.packages("nlme")
library(nlme)
library("lme4", lib.loc="~/R/win-library/3.5")
detach("package:lme4", unload=TRUE)
library(nlme)
library(lme4)
tmp <- lmer(use.prairie[[response]] ~ use.prairie[[pred1[i]]], random = ~1|use.prairie$block)
tmp <- lme(use.prairie[[response]] ~ use.prairie[[pred1[i]]], random = ~1|use.prairie$block)
groups <- list(scaled,
scaled[which(scaled$Plot.category == "Monoculture"),],
scaled[which(scaled$Plot.category == "Treatment"),])
use.prairie <- groups[[j]]
tmp <- lme(use.prairie[[response]] ~ use.prairie[[pred1[i]]], random = ~1|use.prairie$block)
tmp <- lme(use.prairie[[response]] ~ use.prairie[[pred1[i]]], random = ~1|use.prairie$block, data = use.prairie)
View(use.prairie)
tmp <- lme(use.prairie[[response]] ~ use.prairie[[pred1[i]]],
random = ~1|use.prairie$block)
?lme
tmp <- lme(use.prairie[[response]] ~ use.prairie[[pred1[i]]],
random = block)
tmp <- lme(use.prairie[[response]] ~ use.prairie[[pred1[i]]],
random = use.prairie$block)
tmp <- lme(use.prairie[[response]] ~ use.prairie[[pred1[i]]],
random = ~1|use.prairie$block)
tmp <- lme(use.prairie[[response]] ~ use.prairie[[pred1[i]]],
random = ~1|use.prairie$block, data = use.prairie)
tmp <- lme(use.prairie[[response]] ~ use.prairie[[pred1[i]]],
random = ~1|use.prairie$block, data = use.prairie)
tmp <- lme(use.prairie[[response]] ~ use.prairie[[pred1[i]]],
random = ~1|use.prairie$block)
use.prairie$block
scaled$block <- prairie.bio$block
groups <- list(scaled,
scaled[which(scaled$Plot.category == "Monoculture"),],
scaled[which(scaled$Plot.category == "Treatment"),])
namesL <- c("all", "mono", "tmt")
use.prairie <- groups[[j]]
tmp <- lme(use.prairie[[response]] ~ use.prairie[[pred1[i]]],
random = ~1|use.prairie$block)
tmp <- lme(biomass.all ~ NDVI,
random = ~1|use.prairie$block)
tmp <- lme(biomass.all ~ NDVI,
random = ~1|block, data = use.prairie)
summary(tmp)
anova(tmp)
tmp2 <- anova(tmp)
tmp2$`p-value`
install.packages("lmerTest")
library(lmerTest)
tmp <- lmer(biomass.all ~ NDVI + (1|block), data = use.prairie)
summary(tmp)
anova(tmp)
?lme
View(tmp)
hist(resid(tmp))
hist(resid(tmp), breaks = 30)
hist(resid(tmp), breaks = 50)
?qqplot
qqplot(tmp)
qqplot(resid(tmp))
qqplot(y = resid(tmp))
plot(x = 1:length(resid(tmp)), y = resid(tmp))
plot(resid(tmp))
plot(x = tmp@resp[[".->mu"]], y = resid(tmp))
abline(x = mean(resid(tmp)))
abline(h = mean(resid(tmp)))
mean(resid(tmp))
mean(resid(tmp))
plot(tmp)
load("X:/ebird/remote/US/timeseriesExample/gjamInput.rdata")
load("X:/ebird/remote/US/timeseriesExample/gjamInput.rdata")
library(gjam)
library(MASS)
# from source files:
source("R:/clark/clark.unix/GJAM/makeGJAMcurrent/RFunctions/gjamHfunctions.R")
source("R:/clark/clark.unix/GJAM/makeGJAMcurrent/RFunctions/gjamTrimY.r")
source("R:/clark/clark.unix/GJAM/makeGJAMcurrent/RFunctions/gjamPriorTemplate.R")
Rcpp::sourceCpp('R:/clark/clark.unix/GJAM/makeGJAMcurrent/RcppFunctions/cppFns.cpp')
# reduce number of species
ydata[is.na(ydata)] <- 0
redTail <- ydata$`Buteo jamaicensis`
ydata <- as.data.frame(gjamTrimY(ydata[,1:ncol(ydata)],1400)$y)
ydata$`Buteo jamaicensis` <- redTail
ydata <- sapply(ydata, as.numeric)
ydata <- as.data.frame(ydata)
ydata$other <- NULL
View(ydata)
# set up time series groups
times  <- 'year'
groups <- 'geeID'
table(xdata[,c(times,groups)])[,1:15]
# fill in missing values
edata <- ydata*0 + xdata$effort
View(edata)
edata <- apply(edata, 2, as.numeric)
ydata <- as.matrix(ydata)
xdata$year <- as.numeric(xdata$year)
tmp <- gjamFillMissingTimes(xdata, ydata, edata, groups, times)
xdata   <- tmp$xdata
ydata   <- tmp$ydata
View(xdata)
View(ydata)
# load data
load("X:/ebird/remote/US/timeseriesExample/gjamInput.rdata")
length(unique(xdata$geeIDyear))
length(unique(xdata$geeID))*length(unique(xdata$year))
# reduce number of species
ydata[is.na(ydata)] <- 0
redTail <- ydata$`Buteo jamaicensis`
ydata <- as.data.frame(gjamTrimY(ydata[,1:ncol(ydata)],1400)$y)
ydata$`Buteo jamaicensis` <- redTail
ydata <- sapply(ydata, as.numeric)
ydata <- as.data.frame(ydata)
ydata$other <- NULL
# set up time series groups
times  <- 'year'
groups <- 'geeID'
table(xdata[,c(times,groups)])[,1:15]
# fill in missing values
edata <- ydata*0 + xdata$effort
edata <- apply(edata, 2, as.numeric)
ydata <- as.matrix(ydata)
xdata$year <- as.numeric(xdata$year)
tmp <- gjamFillMissingTimes(xdata, ydata, edata, groups, times)
table(colSums(table(xdata[,c(times,groups)])))
xdata   <- tmp$xdata
ydata   <- tmp$ydata
timeZero <- tmp$timeZero
timeLast <- tmp$timeLast
rowInserts <- tmp$rowInserts
snames   <- colnames(ydata)
effMat <- tmp$edata
effMat[rowInserts,] <- effMat[rowInserts,]/10  # 10 factor for uncertainty
ydata[rowInserts,]  <- round(ydata[rowInserts,]/10)
# load data
load("X:/ebird/remote/US/timeseriesExample/gjamInput.rdata")
xdata$year[1:4]
xdata$geeID[1:4]
# reduce number of species
ydata[is.na(ydata)] <- 0
redTail <- ydata$`Buteo jamaicensis`
ydata <- as.data.frame(gjamTrimY(ydata[,1:ncol(ydata)],1400)$y)
ydata$`Buteo jamaicensis` <- redTail
ydata <- sapply(ydata, as.numeric)
ydata <- as.data.frame(ydata)
ydata$other <- NULL
# set up time series groups
times  <- 'year'
groups <- 'geeID'
table(xdata[,c(times,groups)])[,1:15]
# fill in missing values
edata <- ydata*0 + xdata$effort
edata <- apply(edata, 2, as.numeric)
ydata <- as.matrix(ydata)
xdata$year <- as.numeric(xdata$year)
?gjamFillMissingTimes
class(ydata[,4])
tmp <- gjamFillMissingTimes(xdata, ydata, edata, groups, times,
fillNA = F)
xdata   <- tmp$xdata
ydata   <- tmp$ydata
timeZero <- tmp$timeZero
timeLast <- tmp$timeLast
rowInserts <- tmp$rowInserts
snames   <- colnames(ydata)
effMat <- tmp$edata
effMat[rowInserts,] <- effMat[rowInserts,]/10  # 10 factor for uncertainty
View(effMat)
ydata[rowInserts,]  <- round(ydata[rowInserts,]/10)
# beta matrix
formula <- as.formula(~ peto + barren)
hi <- list(peto = 0, barren = 0) # negative combinations
?gjamPriorTemplate
g  <- gjamPriorTemplate(formula, xdata, ydata = ydata, hi = hi)
loBeta <- g[[1]]; hiBeta <- g[[2]]
loBeta[!is.finite(loBeta)] <- -2
View(hiBeta)
View(loBeta)
hiBeta[!is.finite(hiBeta)] <- 2
betaPrior <- list(lo = loBeta, hi = hiBeta)
lform <- as.formula(~ EVIsum)
lo <- list(EVIsum = 0)                                # winter temp
#hi <- list(def = 0, intercept=1.5)
g <- gjamPriorTemplate(lform, xdata, ydata = ydata, lo = lo)
loLambda <- g[[1]]; hiLambda <- g[[2]]
loLambda[!is.finite(loLambda)] <- -.5
hiLambda[!is.finite(hiLambda)] <- .5
lambda <- loLambda*0
lambdaPrior <- list(lo = loLambda, hi = hiLambda)
S <- ncol(ydata)
alpha <- matrix(NA,S,S)
wstar <- apply(ydata/effMat,2,max,na.rm=T)  # carrying capacity based on observed
wstar <- wstar*10                           # assume it is higher
astar <- (1 - 1.2)/wstar                             # reasonable lambda
z <- sqrt( crossprod( as.matrix(ydata) ) )
alpha[z > 1000] <- 2*matrix(astar,S,S,byrow=T)[z > 1000]
View(alpha)
diag(alpha) <- astar
loAlpha <- alpha
hiAlpha <- loAlpha*0
hiAlpha[3,2] <- 1          # a predator and prey
loAlpha[2,3] <- -1
alphaPrior <- list(lo = loAlpha, hi = hiAlpha)
alpha[1:5,1:5]
timeList <- list(times = 'times', rowInserts = rowInserts,
alphaPrior = alphaPrior, betaPrior = betaPrior,
lambdaPrior = lambdaPrior )
effort <- list(columns = 1:S, values = effMat)
rl <- list(N = 8, r = 5)
modelList <- list(typeNames = 'DA',ng=25, burnin=5, reductList = rl,
timeList=timeList, effort = effort)
output <- .gjam(formula, xdata=xdata, ydata=ydata, modelList=modelList)
modelList <- list(typeNames = 'DA',ng=25, burnin=5,
timeList=timeList, effort = effort)
output <- .gjam(formula, xdata=xdata, ydata=ydata, modelList=modelList)
timeList <- list(times = times, rowInserts = rowInserts,
alphaPrior = alphaPrior, betaPrior = betaPrior,
lambdaPrior = lambdaPrior )
modelList <- list(typeNames = 'DA',ng=25, burnin=5,
timeList=timeList, effort = effort)
output <- .gjam(formula, xdata=xdata, ydata=ydata, modelList=modelList)
# load data (xdata and ydata for gjam)
load("X:/ebird/remote/US/timeseriesExample/gjamInput.rdata")
View(ydata)
redTail <- ydata$`Buteo jamaicensis`
ydata <- as.data.frame(gjamTrimY(ydata[,1:ncol(ydata)],1400)$y)
ydata$`Buteo jamaicensis` <- redTail
View(ydata)
length(ydata[is.na(ydata)])
# format for gjam
ydata <- sapply(ydata, as.numeric)
ydata <- as.data.frame(ydata)
ydata$other <- NULL
# set up for time series groups
times  <- 'year'
groups <- 'geeID'
table(xdata[,c(times,groups)])[,1:15]
# set up effort
edata <- ydata*0 + xdata$effort
edata <- apply(edata, 2, as.numeric)
# fill in missing values
ydata <- as.matrix(ydata)
xdata$year <- as.numeric(xdata$year)
tmp <- gjamFillMissingTimes(xdata, ydata, edata, groups, times,
fillNA = F)
xdata   <- tmp$xdata
ydata   <- tmp$ydata
timeZero <- tmp$timeZero
timeLast <- tmp$timeLast
rowInserts <- tmp$rowInserts
snames   <- colnames(ydata)
effMat <- tmp$edata
effMat[rowInserts,] <- effMat[rowInserts,]/10  # 10 factor for uncertainty
ydata[rowInserts,]  <- round(ydata[rowInserts,]/10)
# beta matrix
formula <- as.formula(~ peto + barren)
hi <- list(peto = 0, barren = 0) # negative combinations
g  <- gjamPriorTemplate(formula, xdata, ydata = ydata, hi = hi)
loBeta <- g[[1]]; hiBeta <- g[[2]]
loBeta[!is.finite(loBeta)] <- -2
hiBeta[!is.finite(hiBeta)] <- 2
loBeta['intercept',] <- hiBeta['intercept',] <- NA       # omit intercept
betaPrior <- list(lo = loBeta, hi = hiBeta)
# lambda matrix
lform <- as.formula(~ EVIsum)
lo <- list(EVIsum = 0)                                # winter temp
g <- gjamPriorTemplate(lform, xdata, ydata = ydata, lo = lo)
loLambda <- g[[1]]; hiLambda <- g[[2]]
loLambda[!is.finite(loLambda)] <- -.5
hiLambda[!is.finite(hiLambda)] <- .5
lambda <- loLambda*0
lambdaPrior <- list(lo = loLambda, hi = hiLambda)
S <- ncol(ydata)
alpha <- matrix(NA,S,S)
wstar <- apply(ydata/effMat,2,max,na.rm=T)  # carrying capacity based on observed
wstar <- wstar*10                           # assume it is higher
astar <- (1 - 1.2)/wstar                             # reasonable lambda
z <- sqrt( crossprod( as.matrix(ydata) ) )
alpha[z > 1000] <- 2*matrix(astar,S,S,byrow=T)[z > 1000]
diag(alpha) <- astar
loAlpha <- alpha
hiAlpha <- loAlpha*0
hiAlpha[3,2] <- 1          # a predator and prey
loAlpha[2,3] <- -1
alphaPrior <- list(lo = loAlpha, hi = hiAlpha)
alpha[1:5,1:5]
timeList <- list(times = times, rowInserts = rowInserts,
alphaPrior = alphaPrior, betaPrior = betaPrior,
lambdaPrior = lambdaPrior )
effort <- list(columns = 1:S, values = effMat)
rl <- list(N = 8, r = 5)
modelList <- list(typeNames = 'DA',ng=25, burnin=5,
timeList=timeList, effort = effort)
output <- .gjam(formula, xdata=xdata, ydata=ydata, modelList=modelList)
View(xdata)
colnames(ydata)
# change to common names
spNames <- data.frame(sci = colnames(ydata),
common = c("tufted titmouse", "northern cardinal",
"american crow", "blue jay",
"red-bellied woodpecker", "northern mockingbird",
"carolina chickadee", "carolina wren",
"mourning dove", "red-tailed hawk"))
View(spNames)
colnames(ydata) <- spNames[,2]
# load data (xdata and ydata for gjam)
load("X:/ebird/remote/US/timeseriesExample/gjamInput.rdata")
# reduce number of species
redTail <- ydata$`Buteo jamaicensis` # keep red tailed hawk so we have a carivore
ydata <- as.data.frame(gjamTrimY(ydata[,1:ncol(ydata)],1400)$y)
ydata$`Buteo jamaicensis` <- redTail # add red tail back in
# change to common names
spNames <- data.frame(sci = colnames(ydata),
common = c("tufted titmouse", "northern cardinal",
"american crow", "blue jay",
"red-bellied woodpecker", "northern mockingbird",
"carolina chickadee", "carolina wren",
"mourning dove", "red-tailed hawk"))
ydata$other <- NULL
# change to common names
spNames <- data.frame(sci = colnames(ydata),
common = c("tufted titmouse", "northern cardinal",
"american crow", "blue jay",
"red-bellied woodpecker", "northern mockingbird",
"carolina chickadee", "carolina wren",
"mourning dove", "red-tailed hawk"))
# change to common names
spNames <- data.frame(sci = colnames(ydata),
common = c("tufted titmouse", "northern cardinal",
"american crow", "blue jay",
"red-bellied woodpecker", "northern mockingbird",
"carolina chickadee", "carolina wren",
"mourning dove", "red-tailed hawk"))
View(ydata)
spNames[,2]
spNames$common <- as.character(spNames$common)
colnames(ydata) <- spNames[,2]
View(ydata)
# format for gjam
ydata <- sapply(ydata, as.numeric)
ydata <- as.data.frame(ydata)
# set up for time series groups
times  <- 'year'
groups <- 'geeID'
table(xdata[,c(times,groups)])[,1:15]
# set up effort
edata <- ydata*0 + xdata$effort
edata <- apply(edata, 2, as.numeric)
# fill in missing values
ydata <- as.matrix(ydata)
xdata$year <- as.numeric(xdata$year)
tmp <- gjamFillMissingTimes(xdata, ydata, edata, groups, times,
fillNA = F)
xdata   <- tmp$xdata
ydata   <- tmp$ydata
timeZero <- tmp$timeZero
timeLast <- tmp$timeLast
rowInserts <- tmp$rowInserts
snames   <- colnames(ydata)
effMat <- tmp$edata
effMat[rowInserts,] <- effMat[rowInserts,]/10  # 10 factor for uncertainty
ydata[rowInserts,]  <- round(ydata[rowInserts,]/10)
# beta matrix
formula <- as.formula(~ peto + barren)
hi <- list(peto = 0, barren = 0) # negative combinations
g  <- gjamPriorTemplate(formula, xdata, ydata = ydata, hi = hi)
loBeta <- g[[1]]; hiBeta <- g[[2]]
loBeta[!is.finite(loBeta)] <- -2
hiBeta[!is.finite(hiBeta)] <- 2
loBeta['intercept',] <- hiBeta['intercept',] <- NA       # omit intercept
betaPrior <- list(lo = loBeta, hi = hiBeta)
# lambda matrix
lform <- as.formula(~ EVIsum)
lo <- list(EVIsum = 0)                                # winter temp
g <- gjamPriorTemplate(lform, xdata, ydata = ydata, lo = lo)
loLambda <- g[[1]]; hiLambda <- g[[2]]
loLambda[!is.finite(loLambda)] <- -.5
hiLambda[!is.finite(hiLambda)] <- .5
lambda <- loLambda*0
lambdaPrior <- list(lo = loLambda, hi = hiLambda)
S <- ncol(ydata)
alpha <- matrix(NA,S,S)
wstar <- apply(ydata/effMat,2,max,na.rm=T)  # carrying capacity based on observed
wstar <- wstar*10                           # assume it is higher
astar <- (1 - 1.2)/wstar                             # reasonable lambda
z <- sqrt( crossprod( as.matrix(ydata) ) )
alpha[z > 1000] <- 2*matrix(astar,S,S,byrow=T)[z > 1000]
diag(alpha) <- astar
loAlpha <- alpha
hiAlpha <- loAlpha*0
hiAlpha[3,2] <- 1          # a predator and prey
loAlpha[2,3] <- -1
alphaPrior <- list(lo = loAlpha, hi = hiAlpha)
alpha[1:5,1:5]
timeList <- list(times = times, rowInserts = rowInserts,
alphaPrior = alphaPrior, betaPrior = betaPrior,
lambdaPrior = lambdaPrior )
effort <- list(columns = 1:S, values = effMat)
rl <- list(N = 8, r = 5)
modelList <- list(typeNames = 'DA',ng=25, burnin=5,
timeList=timeList, effort = effort)
output <- .gjam(formula, xdata=xdata, ydata=ydata, modelList=modelList)
load("X:/ebird/dataOther/birdData.rdata")
View(birdData)
traits <- birdData[which(birdData$scientific.name %in% spNames[,1])]
traits <- birdData[which(birdData$scientific.name %in% spNames[,1]),]
View(traits)
birdData[which(birdData$scientific.name == "Parus carolinensis")]
birdData[which(birdData$scientific.name == "Parus carolinensis"),]
cc <- birdData[which(birdData$scientific.name == "Parus carolinensis"),]
View(cc)
cc <- cc[,13:16]
traits[which(traits$scientific.name == "Poecile carolinensis"),13:16] <- cc
save(traits, file = "x:/ebird/remote/US/timeseriesExample/traits.rdata")
View(traits)
# read all data
source('../SCRIPTS/00a.readBiomass.R')
source('../SCRIPTS/00b.compileData.R')
source('../SCRIPTS/00c.readTree-v3.R')
source('../SCRIPTS/00d.problemSpp.2017.R')
source('../SCRIPTS/00e.readData.traits.R')
allRS <- read.csv("../DATA/allRS.csv")
# combine data and clean
source("../SCRIPTS/01.combine.data.R")
?wilcox.test
?kruskal.test
VI <- prairie.use.other[,c("NDVI", "GNDVI", "GDVI2")]
# uses for NDVI and cover analyses
prairie.use.other <- prairie
VI <- prairie.use.other[,c("NDVI", "GNDVI", "GDVI2")]
VI <- melt(VI)
VIaov <- kruskal.test(VI$value ~ VI$variable)
View(VI)
VI <- melt(VI)
VIaov <- kruskal.test(VI$value ~ VI$variable)
library(reshape2)
VIaov <- kruskal.test(VI$value ~ VI$variable)
VI <- melt(VI)
VIaov <- kruskal.test(VI$value ~ VI$variable)
summary(VIaov)
VIaov
out <- TukeyHSD(VIaov)
VIaov$p.value
VIaov$p.value
yale.df <- read.csv("C:/Users/clane_897q3pb/Documents/TA/ENVIRON 710/LabSLR/yaleEPI2018.csv")
library(ggplot2)
library(ggpubr)
theme_set(theme_pubr())
cor(yale.df$GDPpc, yale.df$AIR.current)
model.homework <- lm(AIR.current ~ logGDPpc , data = yale.df)
yale.df$logGDPpc<-log(yale.df$GDPpc)
model.homework <- lm(AIR.current ~ logGDPpc , data = yale.df)
model.homework
summary(model.homework)
yale.df$logAIR.current<-log(yale.df$AIR.current)
yale.df<-yale.df[-c(145), ]
cor(yale.df$AIR.current, yale.df$PopDensity)
cor(yale.df$logAIR.current, yale.df$PopDensity)
model.1 <- lm(AIR.current ~PopDensity  , data = yale.df)
model.1
yale.df$logPopDensity<-log(yale.df$PopDensity)
model.1 <- lm(AIR.current ~logPopDensity  , data = yale.df)
model.1
summary(model.1)
