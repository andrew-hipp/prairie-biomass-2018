message(out)
print(out)
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
print(out)
print.annualPlan(dat)
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
writeLines(print(dat), 'print.dat.txt')
apply(dat$hours[index, c('Subproject', 'Task')], 1,
                            paste,
                            sep = ifelse(dat$hours[index, 'Task'] == '', '', ', ')
                            ) %>%
                      paste('\t\t', ., sep = '')
index = 1:10
apply(dat$hours[index, c('Subproject', 'Task')], 1,
                            paste,
                            sep = ifelse(dat$hours[index, 'Task'] == '', '', ', ')
                            ) %>%
                      paste('\t\t', ., sep = '')
dat$hours[1:10, ]
dat$hours[1:10, c('Subproject', 'Task)]
)
]
dat$hours[1:10, c('Subproject', 'Task')]
apply(dat$hours[1:10, c('Subproject', 'Task')], 1, paste)
ifelse(dat$hours$Task == '', 'blank', 'notBlank')
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
dat$hours
dat$hours$Task
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
dat$hours$Task
?read.xlsx
?data.frame
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
dat$hours$Task
print(dat)
writeLines(print(dat), 'print.dat.txt')
apply(dat$hours[index, c('Subproject', 'Task')], 1,
                            paste,
                            sep = ifelse(dat$hours[index, 'Task'] == '', '', ', ')
                            ) %>%
                      paste('\t\t', ., sep = '')
apply(dat$hours[index, c('Subproject', 'Task')], 1,
                            paste,
                            sep = ifelse(dat$hours[index, 'Task'] == '', '', ', ')
                            ) %>%
()
apply(dat$hours[index, c('Subproject', 'Task')], 1,
                            paste,
                            sep = ifelse(dat$hours[index, 'Task'] == '', '', ', ')
                            )
apply(dat$hours[index, c('Subproject', 'Task')], 1,
                            paste,
                            collapse = ifelse(dat$hours[index, 'Task'] == '', '', ', ')
                            )
index = 30:40
apply(dat$hours[index, c('Subproject', 'Task')], 1,
                            paste,
                            collapse = ifelse(dat$hours[index, 'Task'] == '', '', ', ')
                            )
apply(dat$hours[index, c('Subproject', 'Task')], 1,
                            paste,
                            #collapse = ifelse(dat$hours[index, 'Task'] == '', '', ', ')
                            collapse = ', '
                            )
ifelse(dat$hours[index, 'Task'] == '', '', ', ')
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
print(dat)
writeLines(print(dat), 'print.dat.txt')
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
writeLines(print(dat), 'print.dat.txt')
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
writeLines(print(dat), 'print.dat.txt')
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
writeLines(print(dat), 'print.dat.txt')
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
writeLines(print(dat), 'print.dat.txt')
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
writeLines(print(dat), 'print.dat.txt')
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
writeLines(print(dat), 'print.dat.txt')
plot(dat)
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
writeLines(print(dat), 'print.dat.txt')
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
writeLines(print(dat), 'print.dat.txt')
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
writeLines(print(dat), 'print.dat.txt')
plot(dat)
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
writeLines(print(dat), 'print.dat.txt')
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
writeLines(print(dat), 'print.dat.txt')
plot(dat)
pdf('plot.dat.pdf', 8.5, 11)
plot(dat)
dev.off()
q()
month.abb
month.name
dat
dat$hours
sum(dat$hours$Days[dat$hours$Month == 'Ongoing'], na.rm = T)
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
writeLines(print(dat), 'print.dat.v2.txt')
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
writeLines(print(dat), 'print.dat.v2.txt')
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
writeLines(print(dat), 'print.dat.v2.txt')
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
writeLines(print(dat), 'print.dat.v2.txt')
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
writeLines(print(dat), 'print.dat.v2.txt')
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
writeLines(print(dat), 'print.dat.v2.txt')
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
writeLines(print(dat), 'print.dat.v2.txt')
plot(dat)
source('../../Dropbox/Arboretum - Administration/APPRAISALS/Hipp/annualPlan.R')
writeLines(print(dat), 'print.dat.v2.txt')
q()
library(phytools)
ls()
rm (list = ls())
tr <- read.tree('4ampy.quercus.protobalanus.outgroup.nwk')
tr
plot(tr)
plot(tr, cex = 0.7)
tr <- root(tr, grep('Litho ', tr$tip.label))
args(root)
tr <- root(tr, grep('Litho ', tr$tip.label, value = T))
grep('Litho ', tr$tip.label, value = T)
grep('Litho', tr$tip.label, value = T)
tr <- root(tr, grep('Litho', tr$tip.label, value = T))
plot(tr, cex = 0.7)
dat <- read.csv('gps.que.csv', as.is = T)
head(dat)
dat <- read.csv('gps.que.csv', as.is = T, row.names=1)
head(dat)
intersect(row.names(dat), tr$tip.label)
tr$tip.label
intersect(gsub("|", "_", row.names(dat)), tr$tip.label)
intersect(gsub("|", "_", row.names(dat), fixed = T), tr$tip.label)
dim(dat)
tr
row.names(dat)
cbind(rows = sort(row.names(dat)), tips = sort(tr$tip.label))
intersect(gsub("[|-]", "_", row.names(dat), fixed = T), tr$tip.label)
intersect(gsub("[|-]", "_", row.names(dat)), tr$tip.label)
row.names(dat) <- gsub("[|-]", "_", row.names(dat))
taxa <- intersect(row.names(dat), tr$tip.label)
taxa
dat <- dat[taxa, ]
tr <- drop.tip(tr, which(!tr$tip.label %in% taxa))
tr
dim(dat)
args(phy.to.map)
args(phylo.to.map)
?phylo.to.map
phylo.to.map(tr, dat)
phylo.to.map(tr, dat, type = 'direct')
tr
plot(tr)
tr2 <- multi2di(tr)
phylo.to.map(tr2, dat)
phylo.to.map(tr2, dat, show.tip.label = F)
args(plot.phylo)
phylo.to.map(tr2, dat, cex = 0)
phylo.to.map(tr2, dat, cex = 0)
phylo.to.map(tr2, dat, fsize = 0)
tr$tip.label
phylo.to.map(tr2, dat, ftype = 'off')
history()
history(100)
q()
?segments
x <- stats::runif(12); y <- stats::rnorm(12)
i <- order(x, y); x <- x[i]; y <- y[i]
plot(x, y, main = "arrows(.) and segments(.)")
## draw arrows from point to point :
s <- seq(length(x)-1)  # one shorter than data
arrows(x[s], y[s], x[s+1], y[s+1], col= 1:3)
s <- s[-length(s)]
segments(x[s], y[s], x[s+2], y[s+2], col= 'pink')
?legend
q()
library(ape)
options(repr.plot.width=10, repr.plot.height=4)
tr <- list(edge = matrix(c(7L, 9L,
                          9L, 10L,
                          10L, 11L,
                          11L, 4L,
                          11L, 5L,
                          10L, 3L, 
                          9L, 6L,
                          7L, 8L,
                          8L, 1L,
                          8L, 2L), ncol = 2, byrow = T, dimnames = list(NULL, c('anc', 'desc'))), 
          edge.length = c(0.527646570653822, 0.0921654720483081, 
                          0.0570646922113782, 0.323123264983397, 
                          0.323123264983397, 0.380187957176582, 
                          0.472353429285534, 0.673568669210027, 
                          0.326431330789973, 0.326431330789973), 
          Nnode = 5L, 
          tip.label = c("s1", "s2", "s3", "s4", "s5", "s6")
          )
class(tr) <- 'phylo'
plot(tr)
edgelabels(text = round(tr$edge.length, 3))
C = round(vcv(tr), 3) # rounding just so it is easier to read
C
V <- function(tr, alpha = 0.1, sigsq = 1, rescale = T) {
     Tm = max(node.depth.edgelength(tr))
     C = vcv(tr)
     out = (sigsq / 2*alpha) * exp(-2 * alpha * (Tm-C)) * (1 - exp(-2 * alpha * C))
     if(rescale) out <- out / max(out)
     return(out)
     }
round(V(tr, 0.00001), 3)
library(geiger)
b = 'black'; r = 'red'; y = 'yellow'
regimes = c(b, r, y, y, y, r, r, b, b, b)
par(mar = c(0,0,2,0))
plot(tr, edge.color = regimes, main = 'Original tree')
plot(geiger:::rescale.phylo(tr, 'OU', 3), edge.color = regimes, main = 'O-U tree, alpha = 3')
w.branch = function(tr, alpha = 0.1) {
    t_i.mat <- apply(tr$edge, 1:2, function(x) node.depth.edgelength(tr)[x])
    exp(alpha * t_i.mat[, 2]) - exp(alpha * t_i.mat[, 1]) 
}
print('example weights')
round(cbind(edge.t = node.depth.edgelength(tr)[tr$edge[, 1]],
            edge.l = tr$edge.length,
            w_0.1= w.branch(tr),
            w_1.0 = w.branch(tr, alpha = 1),
            w_5.0 = w.branch(tr, alpha = 5)),
      3)
edge.list <- function(tr = tr, node) {
    if(!node %in% tr$edge[, 2]) return(NA)
        else return(edge.list(tr, tr$edge[1, which(tr$edge[, 2] == node)]))
}
edge.list(node = 1)
debug(edge.list)
edge.list(node = 1)
edge.list(node = 1)
node %in% tr$edge[, 2]
node
tr$edge[, 2]
tr
Q
edge.list <- function(tree = tr, node) {
    if(!node %in% tree$edge[, 2]) return(NA)
        else return(edge.list(tree, tree$edge[1, which(tree$edge[, 2] == node)]))
}
edge.list(node = 1)
debug(edge.list)
edge.list(node = 1)
edge.list(node = 1)
node
tree$edge[, 2]
node
node
node
node
edge.list <- function(tree = tr, node, returnString = NA) {
    if(!node %in% tree$edge[, 2]) return(returnString)
    return(c(returnString, edge.list(tree, tree$edge[1, which(tree$edge[, 2] == node)]), returnString)
}
edge.list(node = 1)
Q
edge.list <- function(tree = tr, node, returnString = NA) {
    if(!node %in% tree$edge[, 2]) return(returnString)
    return(c(returnString, edge.list(tree, tree$edge[1, which(tree$edge[, 2] == node)]), returnString)
}
edge.list(node = 1)
edge.list(node = 1)
node
node
tree$edge
returnString
Q
edge.list
edge.list <- function(tree = tr, node, returnString = NA) {
    if(!node %in% tree$edge[, 2]) return(returnString)
    return(c(returnString, edge.list(tree, tree$edge[1, which(tree$edge[, 2] == node)]), returnString)
}
edge.list <- function(tree = tr, node, returnString = NA) {
    if(!node %in% tree$edge[, 2]) return(returnString)
    return(c(returnString, edge.list(tree, tree$edge[1, which(tree$edge[, 2] == node)]), returnString))
}
edge.list(node = 1)
debug(edge.list)
edge.list(node = 1)
returnString
edge.list(node = 1)
tree
node
q
Q
help(ape)
library(phangorn)
Ancestors
Ancestors(tr, 1)
W
library(ape)
options(repr.plot.width=10, repr.plot.height=4)
tr <- list(edge = matrix(c(7L, 9L,
                          9L, 10L,
                          10L, 11L,
                          11L, 4L,
                          11L, 5L,
                          10L, 3L, 
                          9L, 6L,
                          7L, 8L,
                          8L, 1L,
                          8L, 2L), ncol = 2, byrow = T, dimnames = list(NULL, c('anc', 'desc'))), 
          edge.length = c(0.527646570653822, 0.0921654720483081, 
                          0.0570646922113782, 0.323123264983397, 
                          0.323123264983397, 0.380187957176582, 
                          0.472353429285534, 0.673568669210027, 
                          0.326431330789973, 0.326431330789973), 
          Nnode = 5L, 
          tip.label = c("s1", "s2", "s3", "s4", "s5", "s6")
          )
class(tr) <- 'phylo'
plot(tr)
edgelabels()
q()
library(ouch)
?ouch
?hansen
hansen
ou.lik.fn
ouch:::ou.lik.fn
ouch_weights
ouch:::ouch_weights
q()
q()
library(picante)
?picante
source('https://raw.githubusercontent.com/andrew-hipp/PCM-2018/master/R-tutorials/sources/2018-PCM-09_ecologyImport.r')
dat$plotMeta
names(dat$plotMeta)
boxplot(cc.weed ~ phyD, dat$plotMeta)
boxplot(cc.planted ~ phyD, dat$plotMeta)
boxplot(cc.total ~ phyD, dat$plotMeta)
boxplot(cc.planted ~ phyD, dat$plotMeta)
boxplot(cc.weed ~ phyD, dat$plotMeta)
tr.dist
tr.dist = cophenetic(tr.prairie)
tr.dist
tr.prairie.dist <- cophenetic(tr.prairie)
comm.1_2 <- tr.prairie.dist[names(dat$bin)[dat$bin[1, ] == 1],
                            names(dat$bin)[dat$bin[2, ] == 1]
                            ]
mean(comm.1_2)
comm.1_2
beta.phy <- function(comm1, comm2, tr.dist = cophenetic(tr.prairie), metric = c('mntd', 'mpd')) {
    ## comm1 and comm2 are vectors of names
    comm.1_2 <- tr.dist[comm1, comm2]
    if(metric[1] == 'mpd') out <- mean(comm.1_2)
    if(metric[1] == 'mntd') out <- mean(apply(comm.1_2, 1, min) + apply(comm.1_2, 2, min))
    out
}
beta.phy.mat <- function(mat, ...) {
    out <- matrix(NA, dim(mat)[1])
    for(i in 1:dim(mat)[1]) {
        for(j in 1:dim(mat)[1]) {
            out[i, j] <- beta.phy(dimnames(mat)[[2]][mat[i, ] == 1],
                                 dimnames(mat)[[2]][mat[j, ] == 1])
        } # close j
    } # close i
    return(out)
} # close beta.phy.mat
trial <- beta.phy.mat(dat$bin)
beta.phy()
beta.phy(c('Carex_brevior'))
c1
c2
c1 <- dimnames(dat$bin[dat$bin[1, ] == 1])
c1
c1 <- dimnames(dat$bin)[[2]][dat$bin[1, ] == 1]
c1
c1 <- dimnames(dat$bin)[[2]][dat$bin[2, ] == 1]
c1
beta.phy <- function(comm1, comm2, tr.dist = cophenetic(tr.prairie), metric = c('mntd', 'mpd')) {
    ## comm1 and comm2 are vectors of names
    comm.1_2 <- tr.dist[comm1, comm2]
    if(metric[1] == 'mpd') out <- mean(comm.1_2)
    if(metric[1] == 'mntd') out <- mean(apply(comm.1_2, 1, min) + apply(comm.1_2, 2, min))
    out
}
beta.phy.mat <- function(mat, ...) {
    out <- matrix(NA, dim(mat)[1])
    for(i in 1:dim(mat)[1]) {
        for(j in 1:dim(mat)[1]) {
            out[i, j] <- beta.phy(dimnames(mat)[[2]][mat[i, ] == 1],
                                 dimnames(mat)[[2]][mat[j, ] == 1],
                                 ...)
        } # close j
    } # close i
    return(out)
} # close beta.phy.mat
trial <- beta.phy.mat(dat$bin)
beta.phy()
c1 <- dimnames(dat$bin)[[2]][dat$bin[1, ] == 1]
c2 <- dimnames(dat$bin)[[2]][dat$bin[2, ] == 1]
beta.phy(c1, c2)
c2 <- dimnames(dat$bin)[[2]][dat$bin[3, ] == 1]
beta.phy(c1, c2)
beta.phy <- function(comm1, comm2, tr.dist = cophenetic(tr.prairie), metric = c('mntd', 'mpd')) {
    ## comm1 and comm2 are vectors of names
    comm.1_2 <- tr.dist[comm1, comm2]
    if(metric[1] == 'mpd') out <- mean(comm.1_2)
    if(metric[1] == 'mntd') out <- mean(c(apply(comm.1_2, 1, min), apply(comm.1_2, 2, min)))
    out
}     
beta.phy.mat <- function(mat, ...) {
    out <- matrix(NA, dim(mat)[1])
    for(i in 1:dim(mat)[1]) {
        for(j in 1:dim(mat)[1]) {
            out[i, j] <- beta.phy(dimnames(mat)[[2]][mat[i, ] == 1],
                                 dimnames(mat)[[2]][mat[j, ] == 1],
                                 ...)
        } # close j
    } # close i
    return(out)
} # close beta.phy.mat
trial <- beta.phy.mat(dat$bin)
debug(beta.phy.mat)
trial <- beta.phy.mat(dat$bin)
head(out)
Q
beta.phy <- function(comm1, comm2, tr.dist = cophenetic(tr.prairie), metric = c('mntd', 'mpd')) {
    ## comm1 and comm2 are vectors of names
    comm.1_2 <- tr.dist[comm1, comm2]
    if(metric[1] == 'mpd') out <- mean(comm.1_2)
    if(metric[1] == 'mntd') out <- mean(c(apply(comm.1_2, 1, min), apply(comm.1_2, 2, min)))
    out
}     
beta.phy.mat <- function(mat, ...) {
    out <- matrix(NA, dim(mat)[1], dim(mat)[1])
    for(i in 1:dim(mat)[1]) {
        for(j in 1:dim(mat)[1]) {
            out[i, j] <- beta.phy(dimnames(mat)[[2]][mat[i, ] == 1],
                                 dimnames(mat)[[2]][mat[j, ] == 1],
                                 ...)
        } # close j
    } # close i
    return(out)
} # close beta.phy.mat
trial <- beta.phy.mat(dat$bin)
trial
dist.plots.mntd <- beta.phy.mat(dat$bin)
names(dat$blocks)
dput(names(dat$blocks))
soilVars <- c("AHOR_cm", "GSM", "LOI", "fWAS", "pH", "EC")
dist.plots.soil <- vegdist(scale())
dist.plots.soil <- vegdist(scale(dat$blocks[, soilVars]))
scale(dat$blocks[, soilVars])
dat$plotMeta$plot
scale(dat$blocks[ dat$plotMeta$plot, soilVars])
library(vegan)
soilVars <- c("AHOR_cm", "GSM", "LOI", "fWAS", "pH", "EC")
dat$soils <- scale(dat$blocks[ dat$plotMeta$plot, soilVars])
dist.plots.soil <- vegdist(dat$soils, 'euclidean')
dist.plots.soil
library(vegan)
soilVars <- c("AHOR_cm", "GSM", "LOI", "fWAS", "pH", "EC")
dat$soils <- scale(dat$blocks[ dat$plotMeta$plot, soilVars])
dist.plots.soil <- vegdist(dat$soils, 'euclidean')
out <- mantel(as.dist(dist.plots.mntd), dist.plots.soil, permutations = 200)
out
dist.plots.mntd
dist.plots.soil
as.matrix(dist.plots.soil)
dim(as.matrix(dist.plots.soil))
dim(dist.plots.mntd)
q()
getwd()
setwd('GitHub/prairie-biomass-2018/WORKSPACE/')
ls()
rm(list = ls())
source('../SCRIPTS/00.readData.R')
source('../SCRIPTS/00.readData.R')
dir('../DATA/')
dir('../DATA/')
source('../SCRIPTS/00.readData.R')
names(dat)
dat$blocks
head(dat$blocks)
ls()
names(dat)
dat$plotMeta
head(dat$plotMeta)
source('../SCRIPTS/00.readData.R')
source('../SCRIPTS/00.readData.R')
source('../SCRIPTS/00.readData.R', echo = T)
dat$biomass.raw$type
dat[which(dat$biomass.raw$type == 'Mono'), ] 
source('../SCRIPTS/00.readData.R', echo = T)
dim(dat$plugs)
source('../SCRIPTS/00.readData.R', echo = T)
rm(list = ls())
source('../SCRIPTS/00.readData.R', echo = T)
ls()
dat
names(dat)
dat$mono
source('../SCRIPTS/00.readData.R', echo = T)
source('../SCRIPTS/00.readData.R', echo = T)
head(ndvi.mat)
q()
